msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Fri Sep 27 21:11:10 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.Proof.P3_2
msgid "Exercise 3.2"
msgstr ""

#: Game.Levels.Proof.P3_2
msgid "Prove 'there is a real number x such that x^2 + 9 = 6x'."
msgstr ""

#: Game.Levels.Proof.P3_2
msgid "We prove theorems here using Tactics. The first tactic is 'use'."
msgstr ""

#: Game.Levels.Proof.P3_2
msgid "To show there exists some object x, we only need to provide a witness.\n"
"That is, some a ‚àà ‚Ñù such that a^2 + 9 = 6 * a.\n"
"Type 'use a' in the textbox to give the witness, where a ‚àà ‚Ñù is the solution to the equation."
msgstr ""

#: Game.Levels.Proof.P3_2
msgid "Now you need to prove that a^2 + 9 = a * 3.\n"
"Fortunately, this can be done by some automatic tactics (if your witness is correct).\n"
"Type 'linarith' or 'norm_num' to verify the equation."
msgstr ""

#: Game.Levels.Proof.P3_2
msgid "'use' is a tactic.\n"
" If you ever want information about the tactic,\n"
" you can click on 'use' in the list of tactics on the right."
msgstr ""

#: Game.Levels.Proof.P3_2
msgid "Tactic 'linarith' verifies linear equations automatically.-"
msgstr ""

#: Game.Levels.Proof.P3_2
msgid "Tactic 'norm_num' verifies arithmetic equations automatically."
msgstr ""

#: Game.Levels.Proof.P3_2
msgid "Tactic 'use a' proves goal ‚àÉx ‚àà A, P(x) if a is the witness of P.\n"
"cf. Technique 3.2.1.\n"
"-"
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "Exercise 3.2 continued"
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "This is what he proved.\n"
" Compare the difference of the two statements and their proofs."
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "To prove 'For any x ‚àà ‚Ñù ...', one start with picking an arbitrary a ‚àà ‚Ñù.\n"
"\n"
"Type 'intro a' to pick such a.\n"
"(The name 'a' is arbitrary and can be replaced by any name)"
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "To prove P ‚Üí Q, it amounts to take P as an assumption and then prove Q.\n"
"Type 'intro h1' to let P be an assumption h1 and our goal becomes Q."
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "To prove 'x - 3 = 0', it suffice to show (x-3)^2=0.\n"
"The theorem 'eq_zero_of_mul_self_eq_zero' can be used to prove this.\n"
"Type 'apply eq_zero_of_mul_self_eq_zero' to apply this theorem."
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "'linarith' or 'norm_num will check (a - 3)*(a - 3) = a^2 - 6a + 9 holds."
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "If you ever want information about the theorems,\n"
" you can click on items in the list of theorems on the right."
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "'intro' introduce an element x (for Goal = 'For any x...'),\n"
"or an assumption P(for Goal = P ‚Üí Q).-"
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "'apply T' applies a theorem T to the goal.-"
msgstr ""

#: Game.Levels.Proof.P3_2_2
msgid "To prove x=0, it suffice to show x^2=0-"
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "Exercise 3.3"
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "Let P(x,y) be a predicate over A.\n"
"Prove that ‚àÄ x,y ‚àà A P(x,y) ‚Üî P(y,x) if and only if ‚àÄ x,y ‚àà A P(x,y) ‚Üí P(y,x)."
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "To prove P ‚Üî Q, it amounts to prove P ‚Üí Q and Q ‚Üí P.\n"
"\n"
"Type 'constructor' to decompose the goal P ‚Üî Q into two subgoals P ‚Üí Q and Q ‚Üí P."
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "Now you have two subgoals: 'Active Goal' and 'Goal 2'.\n"
"You may focus on Goal 2 first by typing 'pick_goal 2'.\n"
"Now your turn!"
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "If the goal h is exactly in the assumptions, type 'exact h' to solve it.\n"
"Or you can type 'assumption' without specifying the assumption h."
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "If we already have h: ‚àÄ (x y : A), P x y ‚Üî P y x,\n"
"then in Lean, (h a b) represents P a b ‚Üî P b a.\n"
"In Lean, if h is an assumption of the form P ‚Üî Q, then h.1 represents P ‚Üí Q\n"
"and h.2 represents Q ‚Üí P.\n"
"Type 'exact (h x y).1' to solve the goal."
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "Tactic 'constructor' decompose the goal P ‚Üî Q into P ‚Üí Q and Q ‚Üí P (cf. Technique 3.2.9),\n"
"Or decompose the goal P ‚àß Q into P and Q-"
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "Tactic 'exact h' solves the goal if the goal h is exactly in the assumptions-"
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "Tactic 'assumption' solve the current goal if it is one of the assumptions-"
msgstr ""

#: Game.Levels.Proof.P3_3
msgid "Tactic 'pick_goal' allows to focus on a specific goal.\n"
"Type pick_goal 2 to pick the second goal.-"
msgstr ""

#: Game.Levels.Proof
msgid "Chapter 3. Proof"
msgstr ""

#: Game.Levels.Proof
msgid "Here contains Exercises 3.2 and 3.3 from Chapter 3: Proof.\n"
"\n"
"We will learn how to prove theorems along the way."
msgstr ""

#: Game.Levels.Set.P4_6
msgid "Exercise 4.6"
msgstr ""

#: Game.Levels.Set.P4_6
msgid "Let A, B be sets, prove that A ‚äÜ B if and only if A ‚à™ B = B."
msgstr ""

#: Game.Levels.Set.P4_6
msgid "In case you jump tp Chapter 4, click Tactic 'constructor' on the right."
msgstr ""

#: Game.Levels.Set.P4_6
msgid "To prove A ‚à™ B = B, it suffices to prove for all x, x ‚àà A ‚à™ B ‚Üî x ‚àà B.\n"
"Type 'ext x' or 'ext' to introduce an element x and prove the equivalence."
msgstr ""

#: Game.Levels.Set.P4_6
msgid "How do you prove something with '‚Üî' ?"
msgstr ""

#: Game.Levels.Set.P4_6
msgid "From the assumption 'h: x ‚àà A ‚à™ B', we may split into two cases with assumption 'x ‚àà A' or 'x ‚àà B'.\n"
"Type 'obtain xa | xb := h' to split into two cases with 'xa: x ‚àà A' or 'xb: x ‚àà B'."
msgstr ""

#: Game.Levels.Set.P4_6
msgid "To prove x ‚àà A ‚à™ B, it suffice to prove x ‚àà A ‚à® x ‚àà B.\n"
"Type 'left' to prove x ‚àà A or 'right' to prove x ‚àà B."
msgstr ""

#: Game.Levels.Set.P4_6
msgid "Since we already have assumption h: A ‚à™ B = B, we may rewrite the goal x ‚àà B by x ‚àà A ‚à™ B.\n"
"Type 'rewrite [‚Üê h]' (or whatever name for A ‚à™ B = B) to rewrite the goal.\n"
"Here ‚Üê means we are rewriting from right to left in the equation A ‚à™ B = B."
msgstr ""

#: Game.Levels.Set.P4_6
msgid "Tactic 'obtain H1 | H2 := H' split the assumption H: P ‚à® Q into two cases\n"
" with assumption H1: P or H2: Q respectively-"
msgstr ""

#: Game.Levels.Set.P4_6
msgid "Tactic 'ext x' reduce the goal A = B to x ‚àà A ‚Üî x ‚àà B\n"
"or simply 'ext'"
msgstr ""

#: Game.Levels.Set.P4_6
msgid "Tactic 'left' reduce the goal P ‚à® Q to P."
msgstr ""

#: Game.Levels.Set.P4_6
msgid "Tactic 'right' reduce the goal P ‚à® Q to Q."
msgstr ""

#: Game.Levels.Set.P4_6
msgid "Tactic 'rewrite [h]' or 'rewrite [‚Üê h]' rewrite the current goal with assumption h,\n"
"where h is usually an equivalence or an equation"
msgstr ""

#: Game.Levels.Set.P4_6
msgid "'rw' is the same as 'rewrite"
msgstr ""

#: Game.Levels.Set.P4_7
msgid "Exercise 4.10"
msgstr ""

#: Game.Levels.Set.P4_7
msgid "Let A, B be sets. Show that A ‚äÜ B if and only if A ‚à© B = A."
msgstr ""

#: Game.Levels.Set.P4_7
msgid "Now your turn! The proof should be analogous to the previous one."
msgstr ""

#: Game.Levels.Set.P4_7
msgid "If in the assumptions we have h: x ‚àà A ‚à© B, then we know both x ‚àà A and x ‚àà B.\n"
"Type 'obtain ‚ü®xa, xb‚ü© := h' to obtain xa: x ‚àà A and xb: x ‚àà B.\n"
"Type '‚ü®' using '\\<'"
msgstr ""

#: Game.Levels.Set.P4_7
msgid "If we have h: x ‚àà A ‚à© B, then h.1 means x ‚àà A and h.2 means x ‚àà B."
msgstr ""

#: Game.Levels.Set.P4_7
msgid "Tactic 'obtain ‚ü®H1, H2‚ü© := H' (Type '‚ü®' using '\\<') is applied to assumption H: P ‚àß Q to obtain two new assumptions H1: P and H2: Q\n"
"'obtain H1 | H2 := H is applied to H: P ‚à® Q to split into two cases.\n"
"-"
msgstr ""

#: Game.Levels.Set
msgid "Chapter 4. Set"
msgstr ""

#: Game.Levels.Set
msgid "Here contains Exercises 4.6 and 4.7 from Chapter 4: Sets.\n"
"\n"
"In case you skip the previous chapters, click items on the right to check how to use them."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "Exercise 5.4 (1)"
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "Let R be a relation from ‚Ñ§ to ‚Ñ§ such that R a b if and only if a-b is even.\n"
"Prove that R = R‚Åª¬π."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "Relations are sets, so to prove R = R‚Åª¬π as set equality,\n"
"we can use tactic 'ext a b'."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "We may rewrite R‚Åª¬π by the definition of inverse using 'rewrite [inverse]'."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "We may also unfold the definition of R using 'rewrite [R]' or 'unfold R'.\n"
"To unfold the definition of R in an assumption h,\n"
"Type 'rewrite [R] at h' or 'unfold R at h."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "a-b is even if and only if b-a is even.\n"
"Type 'Even_negation_iff' to apply this."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "We may rewrite R‚Åª¬π by the definition of inverse using rw [inverse]."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "We may also unfold the definition of R using rw [R] or unfold [R].\n"
"To unfold the definition of R in an assumption h,\n"
"we may use the tactic 'rewrite [R] at h' or 'unfold R at h."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "To prove b-a is even, it suffices to prove a-b is even.\n"
"Type 'apply Even_negation' to apply this."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "Tactic 'simp' simplify the current goal."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "Tactic 'unfold R' unfolds a definition R. It is the same as rw [R].\n"
" 'unfold R at h' unfolds the definition R in the assumption h"
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "Tactic 'rewrite [h]' or 'rewrite [‚Üê h]' rewrite the current goal with assumption h,\n"
"where h is usually an equivalence, equation or a definition.\n"
"'rewrite [h] at h1' rewrites the assumption h1 with h"
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "If a-b is even, then so do b-a."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "a-b is even if and only if b-a is even."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "'inv_def' states the definition of the inverse of relations. R.inv a b if and only if R b a."
msgstr ""

#: Game.Levels.Relation.P5_4
msgid "For any a,b ‚àà ‚Ñ§, a R b if and only if a-b is even"
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "Exercise 5.4 (2)"
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "Let R be a relation from ‚Ñ§ to ‚Ñ§ such that R a b if and only if a-b is even.\n"
"Prove that R = R ‚Ä¢ R."
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "How to show two relations (sets) are equal?"
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "We may rewrite ‚Ä¢ by the definition of composition in an assumption h.\n"
"Type 'rw [composition] at h' or 'unfold composition at h."
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "If we have an assumption h: ‚àÉ y, P(y), then we may obtain an object c with P(c).\n"
"Type 'obtain ‚ü®c, h1‚ü© := h' to obtain c and h2: P(c)."
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "If a-c and c-b are both even, then a-b is even as well.\n"
"Since the sum of two even numbers is still even.\n"
"Type 'apply Even_add' to apply this fact."
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "Type assumption to clear the remaining goals."
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "Which element should we choose?"
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "R ‚Ä¢ S means the composition of two relations R and S.\n"
"To use ‚Ä¢ in a tactic, use \"composition\", e.g, unfold composition."
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "If a-b is even and b-c is even, then a-c is also even by adding a-b and b-c."
msgstr ""

#: Game.Levels.Relation.P5_4_2
msgid "Tactic 'obtain ‚ü®H1, H2‚ü© := H' is applied to assumption H: P ‚àß Q to obtain two new assumptions H1: P and H2: Q\n"
"'obtain H1 | H2 := H is applied to H: P ‚à® Q to split into two cases.\n"
"'obtain ‚ü®c,h1‚ü© := H is applied to H: ‚àÉ y P(y).-"
msgstr ""

#: Game.Levels.Relation.P5_5
msgid "Let A B C D be sets, R is a relation from A to B,\n"
"S is a relation from B to C, and T is a relation from C to D.\n"
"Prove that T ‚Ä¢ (S‚Ä¢ R) = (T ‚Ä¢ S) ‚Ä¢ R."
msgstr ""

#: Game.Levels.Relation.P5_5
msgid "We may either split ‚Üî into two directions,\n"
"or unfold the definition of composition."
msgstr ""

#: Game.Levels.Relation.P5_5
msgid "Actually the two expressions are logically equal,\n"
"type 'tauto'."
msgstr ""

#: Game.Levels.Relation.P5_5
msgid "Now your turn! The proof is a bit long,\n"
"but all the steps should appeared previously."
msgstr ""

#: Game.Levels.Relation.P5_5
msgid "Tactic \"tauto\" deal with purely logical deduction."
msgstr ""

#: Game.Levels.Relation.P5_9
msgid "Exercise 5.9"
msgstr ""

#: Game.Levels.Relation.P5_9
msgid "Let A, B be sets, R be a relation from A to B.\n"
"Prove that R = (R‚Åª¬π)‚Åª¬π."
msgstr ""

#: Game.Levels.Relation.P5_9
msgid "Should be not hard, just unfold the definitions."
msgstr ""

#: Game.Levels.Relation
msgid "Chapter 5. Relations"
msgstr ""

#: Game.Levels.Relation
msgid "Here contains Exercises 5.4, 5.5 and 5.9 from Chapter 5: Relations.\n"
"\n"
"In case you skip the previous chapters, click items on the right to check how to use them."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_1
msgid "Exercise 6.2"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_1
msgid "Let R = {(x, y) ‚àà ‚Ñö : xy ‚©æ 0} be a relation from ‚Ñö to ‚Ñö.\n"
" Decide whether R is reflexive."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_1
msgid "R is reflexive means x R x for any x ‚àà Q.\n"
"Type 'rewrite [Reflexive]' or 'dsimp [Reflexive]' (simplify the definition)\n"
"to rewrtie the definition of Reflexive."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_1
msgid "For any a, a R a"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_1
msgid "For any x ‚àà Q, x * x ‚â• 0"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_1
msgid "Tactic 'dsimp' simplify the current goal by unfolding the definitions."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_2
msgid "Exercise 6.2"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_2
msgid "Let R = {(x, y) ‚àà ‚Ñö : xy ‚©æ 0} be a relation from ‚Ñö to ‚Ñö.\n"
" Decide whether R is symmetric."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_2
msgid "we may use the commutativity of multiplication x*y = y*x here\n"
"Type rw[mul_comm]."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_2
msgid "For any a b, a R b implies b R a"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_2
msgid "For any a b ‚àà ‚Ñö, a * b = b * a"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_3
msgid "Exercise 6.2"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_3
msgid "Let R = {(x, y) ‚àà ‚Ñö : xy ‚©æ 0} be a relation from ‚Ñö to ‚Ñö.\n"
" Decide whether R is antisymmetric."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_3
msgid "We may directly simplify our goal by pushing the negation inside\n"
"applying De Morgan's rule. Type 'push_neg' to simplify the goal."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_3
msgid "What is your counterexample?"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_3
msgid "For any a b, a R b and b R a implies a = b"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_3
msgid "Tactic \"push_neg\" pushes the outside ¬¨ to inside using De Morgan's rule."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_3
msgid "Tactic \"norm_num\" solve the problem of verifying computational facts,\n"
" e.g, 1+1=2."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_4
msgid "Exercise 6.2"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_4
msgid "Let R = {(x, y) ‚àà ‚Ñö : xy ‚©æ 0} be a relation from ‚Ñö to ‚Ñö.\n"
" Decide whether R is transitive."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_4
msgid "For any a b c, a R b and b R c implies a R c."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_5
msgid "Exercise 6.2"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_5
msgid "Let S be a relation on R^2 by setting, for all (x1, y1), (x2, y2) ‚àà R2,\n"
"(x1, y1) S (x2, y2) ‚áî x1 ‚©Ω x2 and y1 ‚©Ω y2.\n"
"Decide whether R is reflexive."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_6
msgid "Exercise 6.2"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_6
msgid "Let S be a relation on R^2 by setting, for all (x1, y1), (x2, y2) ‚àà R2,\n"
"(x1, y1) S (x2, y2) ‚áî x1 ‚©Ω x2 and y1 ‚©Ω y2.\n"
"Decide whether R is symmetric."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_7
msgid "Exercise 6.2"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_7
msgid "Let S be a relation on R^2 by setting, for all (x1, y1), (x2, y2) ‚àà R2,\n"
"(x1, y1) S (x2, y2) ‚áî x1 ‚©Ω x2 and y1 ‚©Ω y2.\n"
"Decide whether R is antisymmetric."
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_8
msgid "Exercise 6.2"
msgstr ""

#: Game.Levels.EquivalenceRelation.P6_2_8
msgid "Let S be a relation on R^2 by setting, for all (x1, y1), (x2, y2) ‚àà R2,\n"
"(x1, y1) S (x2, y2) ‚áî x1 ‚©Ω x2 and y1 ‚©Ω y2.\n"
"Decide whether R is transitive."
msgstr ""

#: Game.Levels.EquivalenceRelation
msgid "Chapter 6. Equivalence Relations and partial orders"
msgstr ""

#: Game.Levels.EquivalenceRelation
msgid "Here contains Exercises 6.2 from Chapter 6: Equivalence Relations and partial orders.\n"
"\n"
"THIS WORLD IS STILL UNDER CONSTRUCTION"
msgstr ""

#: Game
msgid "CS1231 Tutorial Exercise Game"
msgstr ""

#: Game
msgid "Here are some exercises in CS1231, but in a game style!\n"
"You may navigate your proof through entering some commands, and we will check if your proof is correct.\n"
"Disclaimer: This game is experimental, and not affiliated with the official CS1231 module,\n"
" and it is of course not mandatory."
msgstr ""

#: Game
msgid "Contact sunm07@u.nus.edu for any feedback or bug reports.\n"
"The game is based on a proof assistant called LEAN, to learn more, visit\n"
"https://lean-lang.org/ or https://adam.math.hhu.de/#/g/leanprover-community/nng4"
msgstr ""

#: Game
msgid "CS1231 Tutorial Exercise Game"
msgstr ""

#: Game
msgid "."
msgstr ""
